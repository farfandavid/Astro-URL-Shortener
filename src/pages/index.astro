---
import { pool } from "../config/db";
import Layout from "../layouts/Layout.astro";
// Borrar Node_modules y package-lock.json si sale error de Tipos
const [rows] = await pool
	.query("SELECT * FROM urls")
	.then((res) => {
		return JSON.parse(JSON.stringify(res));
	})
	.catch((err) => {
		console.error(err);
		return null;
	});
console.log(rows);
---

<Layout>
	<form
		action=""
		class="flex flex-col gap-2 w-2/3 md:1/3 mx-auto mt-5"
		id="form"
	>
		<label for="username" class="text-slate-300">Username</label>
		<input
			type="text"
			name="username"
			class="border rounded"
			placeholder="Username"
		/>
		<p class="text-red-500 text-xs" data-error="username"></p>
		<label for="password" class="text-slate-300">Password</label>
		<input
			type="password"
			name="password"
			class="border rounded"
			placeholder="Password"
		/>
		<p class="text-red-500 text-xs" data-error="password"></p>
		<label for="original-url" class="text-slate-300">Original Url</label>
		<input
			type="text"
			name="original-url"
			class="border rounded"
			placeholder="Url"
		/>
		<p class="text-red-500 text-xs" data-error="original-url"></p>
		<button type="submit" class="bg-slate-500 rounded text-white"
			>Submit</button
		>
	</form>
	<div>
		<h1 class="text-white text-center font-bold mt-5 underline">Links</h1>
		{
			() => {
				if (!rows) return <p>No hay urls</p>;
				return rows.map((row: any) => {
					return (
						<div class="text-white flex gap-1 justify-between p-5">
							<a
								href={
									import.meta.env.SITE + "/" + row.short_code
								}
								target="_blank"
							>
								{row.original_url}
							</a>
							<a
								href={
									import.meta.env.SITE + "/" + row.short_code
								}
								target="_blank"
							>
								{import.meta.env.SITE + "/" + row.short_code}
							</a>
							<p>
								{new Date(row.created_at).toLocaleDateString()}
							</p>
						</div>
					);
				});
			}
		}
	</div>
</Layout>
<script>
	const form = document.getElementById("form") as HTMLFormElement;
	form?.addEventListener("submit", async (e) => {
		e.preventDefault();
		const formData = new FormData(form);
		const res = await fetch("/api/short", {
			method: "POST",
			body: formData,
		});
		const data = await res.json();
		if (!res.ok) {
			console.error(data);
			document.querySelectorAll("[data-error]").forEach((el) => {
				el.textContent = "";
			});
			if (data.error) {
				alert(data.error);
				return;
			}
			if (data.username) {
				const usernameError = document.querySelector(
					'[data-error="username"]',
				) as HTMLParagraphElement;
				usernameError && (usernameError.textContent = data.username);
			}
			if (data.password) {
				const passwordError = document.querySelector(
					'[data-error="password"]',
				) as HTMLParagraphElement;
				passwordError && (passwordError.textContent = data.password);
			}
			if (data["original-url"]) {
				const originalUrlError = document.querySelector(
					'[data-error="original-url"]',
				) as HTMLParagraphElement;
				originalUrlError &&
					(originalUrlError.textContent = data["original-url"]);
			}
			return;
		} else {
			document.querySelectorAll("[data-error]").forEach((el) => {
				el.textContent = "";
			});
			window.location.reload();
		}
	});
	const getAllUrl = async () => {
		const res = await fetch("/api/short");
		const data = await res.json();
		console.log(data);
	};
	getAllUrl();
</script>
